General breakdown:
Each agent has its own alpaca paper trading account. On startup, we query alpaca and get the Account object and the Positions object. 
Then on the tick, each agent will run its algorithm (however it decides what action to take) then it will submit a trade object to a 
broker queue, the broker service then processes the trade in the queue and submits it to alpaca the broker then runs a callback function 
in which the agent re-queries its account and positions and updates its state.

Specifications:
- all trading is done through alpacas paper trading api, this way we dont need to handle any market data or anything. alpaca will handle
everything for us and even gives us a nice dashboard to view portfolio and performance
- each agent has its own api key and secret that way each can use its own alpaca account
- each agent runs concurrently in its own goroutine while there is a single brokerage process handling the trade queue
- every part of the system is designed to be modular so we can easily modify individual parts without affecting the whole thing

Order flow:
agent updates state -> agent makes decision -> submit trade to broker ->
broker processes trade and submits it to alpaca -> alpaca places trade ->
if successful, broker calls the callback function -> agent updates state again

agents avoid wash trading by checking the last trade symbol and skipping if it is the same symbol